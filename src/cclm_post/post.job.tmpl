#!/bin/bash
#

set -e

#echo START @{YYYY} @{MM}  >> @{SPDIR}/logs/finish_joblist

DATE_START=$(date +%s)
DATE1=${DATE_START}

##################################################################################################
# build time series
##################################################################################################

export IGNORE_ATT_COORDINATES=1  # setting for better rotated coordinate handling in CDO

#... uncompress files if they have been compressed by gzip in the "arch" job
if [  @{ITYPE_COMPRESS_ARCH} -eq 2 ]
then
  echo "**** gzip uncompression"
  gunzip -r @{INPDIR}/@{CURRDIR}/*
fi

#... save the constant file


#if [ ! -f @{WORKDIR}/@{EXPPATH}/lffd@{YDATE_START}c.nc ]
#then
#  cp @{INPDIR}/@{CURRDIR}/out01/lffd@{YDATE_START}c.nc @{WORKDIR}/@{EXPPATH}
#fi

#... set number of boundary lines to be cut off in the time series data
NBOUNDCUT=@{NBOUNDCUT}
let "IESPONGE = @{IE_TOT} - NBOUNDCUT - 1"
let "JESPONGE = @{JE_TOT} - NBOUNDCUT - 1"

#... cut of the boundary lines from the constant data file
if [ ! -f @{WORKDIR}/@{EXPPATH}/cclm_const ]
then
  ncks -h -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} @{INPDIR}/@{FIRST_YEAR}/output/out01/lffd@{YDATE_START}c.nc @{WORKDIR}/@{EXPPATH}/cclm_const
fi
#... functions for building time series
function timeseries {  # building a time series for a given quantity
cd @{INPDIR}/@{CURRDIR}/$2
@{NCO_BINDIR}/ncrcat -h -O -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -v $1 lffd@{CURRENT_DATE}*[!cpz].nc @{OUTDIR}/@{YYYY_MM}/$1_ts.nc
@{NCO_BINDIR}/ncks -h -A -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -v lon,lat,rotated_pole @{INPDIR}/@{CURRDIR}/$2/lffd@{CURRENT_DATE}0100.nc @{OUTDIR}/@{YYYY_MM}/$1_ts.nc
}

PLEVS=(4 200. 500. 850. 925.) # list of pressure levels. Must be the same as or a subset
                                   # of the list in the specific GRIBOUT
function timeseriesp {  # building a time series for a given quantity on pressure levels
NPLEV=1
while [ ${NPLEV} -le ${PLEVS[0]} ]
do
  PASCAL=$(python -c "print(${PLEVS[$NPLEV]} * 100.)")
  PLEV=$(python -c "print(int(${PLEVS[$NPLEV]}))")
  cd @{INPDIR}/@{CURRDIR}/$2
  @{NCO_BINDIR}/ncrcat -h -O -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -d pressure,${PASCAL},${PASCAL} -v $1 lffd@{CURRENT_DATE}*p.nc @{OUTDIR}/@{YYYY_MM}/${1}${PLEV}p_ts.nc
  @{NCO_BINDIR}/ncks -h -A -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -v lon,lat,rotated_pole @{INPDIR}/@{CURRDIR}/$2/lffd@{CURRENT_DATE}0100p.nc @{OUTDIR}/@{YYYY_MM}/${1}${PLEV}p_ts.nc
  let "NPLEV = NPLEV + 1"
done
}

ZLEVS=(4 100. 1000. 2000. 5000.) # list of pressure levels. Must be the same as or a subset
                                   # of the list in the specific GRIBOUT
function timeseriesz {
NZLEV=1
while [ ${NZLEV} -le ${ZLEVS[0]} ]
do
  ZLEV=$(python -c "print(int(${ZLEVS[$NZLEV]}))")
  cd @{INPDIR}/@{CURRDIR}/$2
  @{NCO_BINDIR}/ncrcat -h -O -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -d altitude,${ZLEV}.,${ZLEV}. -v $1 lffd@{CURRENT_DATE}*z.nc @{OUTDIR}/@{YYYY_MM}/${1}${ZLEV}z_ts.nc
  @{NCO_BINDIR}/ncks -h -A -d rlon,${NBOUNDCUT},${IESPONGE} -d rlat,${NBOUNDCUT},${JESPONGE} -v lon,lat,rotated_pole @{INPDIR}/@{CURRDIR}/$2/lffd@{CURRENT_DATE}0100z.nc @{OUTDIR}/@{YYYY_MM}/${1}${ZLEV}z_ts.nc
  let "NZLEV = NZLEV + 1"
done
}


DATE_START=$(date +%s)

# --- build time series for selected variables

timeseries  FRESHSNW   out01
timeseries  PP         out01
timeseries  QC         out01
timeseries  QI         out01
timeseries  QV         out01
timeseries  QV_S       out01
timeseries  T          out01
timeseries  T_S        out01
timeseries  T_SNOW     out01
timeseries  T_SO       out01
timeseries  U          out01
timeseries  V          out01
timeseries  W_I        out01
timeseries  W_SNOW     out01
timeseries  W_SO       out01
#
timeseries  P          out02
timeseries  W          out02
#
timeseries  SNOW_CON   out03
timeseries  SNOW_GSP   out03
timeseries  RAIN_CON   out03
timeseries  RAIN_GSP   out03
timeseries  TOT_PREC   out03
#
timeseries  ALHFL_S    out04
timeseries  ALWD_S     out04
timeseries  ALWU_S     out04
timeseries  ASHFL_S    out04
timeseries  ASOD_T     out04
timeseries  ASOB_T     out04
timeseries  ASOB_S     out04
timeseries  ATHB_T     out04
timeseries  ATHB_S     out04
timeseries  ASWDIFD_S  out04
timeseries  ASWDIFU_S  out04
timeseries  ASWDIR_S   out04
timeseries  CLCT       out04
timeseries  DURSUN     out04
timeseries  PMSL       out04
timeseries  PS         out04
timeseries  QV_2M      out04
timeseries  T_2M       out04
timeseries  U_10M      out04
timeseries  V_10M      out04
timeseries  RELHUM_2M  out04
timeseries  ALB_RAD    out04
#
timeseries  AEVAP_S    out05
timeseries  CLCH       out05
timeseries  CLCL       out05
timeseries  CLCM       out05
timeseries  H_SNOW     out05
timeseries  RUNOFF_G   out05
timeseries  RUNOFF_S   out05
timeseries  T_S        out05
timeseries  TQC        out05
timeseries  TQI        out05
timeseries  TQV        out05
timeseries  W_SO_ICE   out05
timeseries  W_SO       out05
timeseries  HPBL       out05
timeseries  SNOW_MELT  out05
timeseries  W_SNOW     out05
#
timeseriesp FI         out06
timeseriesp QV         out06
timeseriesp T          out06
timeseriesp U          out06
timeseriesp V          out06
timeseriesp RELHUM     out06
#
timeseries  TMAX_2M    out07
timeseries  TMIN_2M    out07
timeseries  VMAX_10M   out07
timeseries  VABSMX_10M out07
#

#################################################
# compress data
#################################################
case @{ITYPE_COMPRESS_POST} in

0)        #... no compression

  echo "**** no compression ****"
  ;;

1)        #... internal netCDF compression

  echo "**** internal netCDF compression"
  cd @{OUTDIR}/@{YYYY_MM}

  FILELIST=$(ls -1)
  for FILE in ${FILELIST}
  do
    @{NC_BINDIR}/nccopy -d 1 -s ${FILE} tmp.nc
    mv tmp.nc ${FILE}
  done
  ;;

2)       #... gzip compression

  echo "**** gzip compression"
  cd @{OUTDIR}/@{YYYY_MM}

  FILELIST=$(ls -1)
  for FILE in ${FILELIST}
  do
    gzip ${FILE}
  done
  ;;

*)

  echo "**** invalid value for  ITYPE_COMPRESS_ARCH: "@{ITYPE_COMPRESS_POST}
  echo "**** no compression applied"
  ;;

esac


DATE2=$(date +%s)
#SEC_TS=$(python -c "print ${DATE2}-${DATE1}")
#echo time used for bulding time series: ${SEC_TS} s


SEC_TOTAL=$(python -c "print(${DATE2}-${DATE_START})")
echo total time for postprocessing: ${SEC_TOTAL} s

#echo "END  " @{YYYY} @{MM}  >> @{WORKDIR}/@{EXPPATH}/joblogs/post/finish_joblist
